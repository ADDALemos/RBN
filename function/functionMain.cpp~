//
// Created by alexandre on 10/16/16.
//

#include <map>
#include <fstream>
#include "functionMain.h"
#include "minimize/start.h"


functionMain::functionMain() {}
functionMain::functionMain(const std::vector<functionLine> &f,std::string file, int tempN) : f(f), file(file), tempN(tempN) {}


const std::vector<functionLine> &functionMain::getF() const {
    return f;
}

void functionMain::setF(const std::vector<functionLine> &f) {
    functionMain::f = f;
}

void functionMain::minimize() {
    int orVal=tempN;
    std::vector<std::string> term;
    std::vector<functionLine> l;
    std::map<std::string, std::string> map;
    std::pair<std::map<std::string, std::string>, char> temp;
    vertex dest = f[0].getDest();
    char letter = ':';
    for (int i = 0; i < functionMain::f.size(); i++) {
        temp = f[i].mapping(map, letter);
        letter = temp.second;
        map = temp.first;
    }
    for (int i = 0; i < functionMain::f.size(); i++) {
        term.push_back(f[i].functionWrite(map));
    }
    int size = letter - ':';
    vector<vector<std::string>> r = start(term, size);
    for (int i = 0; i < r.size(); i++) {
        std::vector<vertex> originPos;
        std::vector<vertex> originNeg;

        for (int y = 0; y < r[i].size(); y++) {
            typedef std::map<std::string, std::string>::iterator it_type;
            for (it_type iterator = map.begin(); iterator != map.end(); iterator++) {
                if (r[i][y].substr(0, 1).compare("~") == 0) {
                    if (iterator->second.compare(r[i][y].substr(1,1)) == 0) {
                        std::cout << "N" << iterator->first << "\n";
                        originNeg.push_back(iterator->first);
                    }
                } else {
                    if (iterator->second.compare(r[i][y]) == 0) {
                        std::cout << "P" << iterator->first << "\n";
                        originPos.push_back(iterator->first);
                    }


                }
            }
        }
        functionLine fL = functionLine(originPos, originNeg, dest);
        fL.ASP(file,tempN);
        tempN++;
        l.push_back(fL);
    }

    setF(l);
    std::ofstream outfile;
    std::cout<<size<<"\n";

    outfile.open(file+".lp", std::ios_base::app);
    outfile<<"functionOr("<<tempN<<","<<dest.getName()<<").\n";
    for(int i=0; i<l.size();i++){
        outfile<<"regulator("<<tempN<<",t"<<orVal<<"),\n";
        outfile<<"edge("<<orVal<<","<<dest.getName()<<").\n";
        orVal++;
    }
}

int functionMain::getTempN() const {
    return tempN;
}

void functionMain::NET(std::string file) {
    for(int i=0;i<f.size();i++)
        f[i].NET(file);

}




